from tkinter import Tk
import tkinter.filedialog
import os
import time
import shutil

from InputFinding import InputFinding
from Filtering import Filtering
from SignalTransform import SignalTransform
from PlotData import PlotData
from Output import Output

#class Main():
def main():
    finder = InputFinding()
    haar = Filtering()
    transformer = SignalTransform()
    plotter = PlotData()
    output = Output()

    Tk().withdraw() #removes Tkinter window


    ###For testing puroses directory is commented out and hard coded
    #directory = tkinter.filedialog.askdirectory(initialdir = 'C:/', title = 'Please select the file folder containing the Grade folders') #User inputs directory containing each 'Grade'
    directory = 'C:/Users/Munia/Documents/Work/output'
    t0= time.time()
    if not os.path.exists(directory + '/Analysis'): os.makedirs(directory + '/Analysis')
    else:   
        shutil.rmtree(directory + '/Analysis') #remove whole analysis folder if it exists
        os.makedirs(directory + '/Analysis')   #recreate analysis folder

    grades = os.listdir(directory)
    grades = [grade for grade in grades if (grade.count('.') == 0 and grade[:5].lower() == 'grade')] #Only analyze folders beginning with the word 'Grade'
    for grade in grades:
        experimentPath = directory + '/' + grade #the path that leads to the experiment folders
        if len(os.listdir(experimentPath)) == 0:
            print('No folders to search found within ' + experimentPath)
            break
        experiments = os.listdir(experimentPath) #list of experiments within each specific 'Grade' folder
        experiments = [experiment for experiment in experiments if (experiment.count('.') == 0 and not(experiment[:8].lower() == 'analysis' or experiment[:4].lower() == 'high'))] #leaves directories and anything not beginning in 'analysis' or '
        for i in range(len(experiments)):
            experiments[i] = experiments[i][0].upper() + experiments[i][1:]
        for experiment in experiments:
            testPath = experimentPath + '/' + experiment #path leading to test folders
            if len(os.listdir(testPath)) == 0:
                print('No folders to search found within ' + testPath)
                break
            tests = os.listdir(testPath)
            tests = [test for test in tests if test.count('.') == 0 and test[:4].lower() == 'test']
            for test in tests:
                TDMSPath = testPath + '/' + test #path to the set of TDMS files
                files = os.listdir(TDMSPath)
                files = [file for file in files if file.endswith(".tdms")]
                if len(files) == 0: #If there are no TDMS files skip directory
                    print('No TDMS files found within ' + TDMSPath)
                    break
                plotPath = directory + '/Analysis/' + grade + '/' + experiment + '/' + test   #The path used to store the plots produced by plotter
                os.makedirs(plotPath + '/Event Pictures') #Creates the required directories for storing the plots
                os.makedirs(plotPath + '/Contour Plot')
                finder.parameterSearch(TDMSPath) #Uses the InputParams module to collect input for the system
                haar.Haar() #Takes the Haar wavelet filter
                transformer.Transform() #Applies the FFT to both the filtered data and the original data
                plotter.plot(plotPath)  #Creates the plots on both the original data and the transformed data
                output.output(plotPath)
    '''
    Implementation missing text files. Other than that it retains the functionality of the old code. Would like to discuss certain things with Felipe and Trevor.
    Considerations:
    time is counted during the input frequencies phase. I could take a time before and after, subtract the two return it to main and subtract that value from the final calculation but that seems a bit too roundabout
    Still have to name contour plot
    '''

    print('Elapsed Time: ' + ('%.2f' % (time.time() - t0)) + ' s')

if __name__ == "__main__":
    main()
